// Online C++ compiler to run C++ program online
#include <iostream>
#include <queue>
using namespace std;

class Node{
    public:
    int data;
    Node* left;
    Node* right;
    
    Node(int data){
        this ->data=data;
        left=NULL;
        right=NULL;
    }
};

  
 

Node* buildTree(){
    int data;
    cout<<"Enter the data:"<<endl;
    cin>>data;
    
    if(data==-1){
        return NULL;
    }
    
    // step A
    Node* root=new Node(data);
    
    // step B
    cout<<"Enter data for left part of "<<data<<" node "<<endl;
    root->left=buildTree();
    
    //step C
    cout<<"Enter data for right part of "<<data<<" node "<<endl;
    root->right=buildTree();
    
    return root;
}
void levelOrderTraversal(Node* root){
    queue<Node*>q;
    //initially
    q.push(root);
    q.push(NULL);
    
    while(!q.empty()){
        //a
        Node* temp=q.front();
        //b
        q.pop();
        
        if(temp==NULL){
            cout<<endl;
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            //C
            cout<<temp->data<<" ";
            //D
            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        
        }
        
    }
}

void inorderTraversal(Node* root){
    //base case
    if(root==NULL){
        return;
    }
    
    //LNR
    inorderTraversal(root->left);
    cout<<root->data<<" ";
    inorderTraversal(root->right);
    
}

void preorderTraversal(Node* root){
    //base case
    if(root==NULL){
        return ;
    }
    
    //NLR
    cout<<root->data<<" ";
    preorderTraversal(root->left);
    preorderTraversal(root->right);
}

void postorderTraversal(Node* root){
    if(root==NULL){
        return;
    }
    
    //LRN
    postorderTraversal(root->left);
    postorderTraversal(root->right);
    cout<<root->data<<" ";
}

int height(Node* root){
    if(root==NULL){
        return 0;
    }
    
    int leftHeight=height(root->left);
    int rightHeight=height(root->right);
    int ans=max(leftHeight,rightHeight) + 1;
    
    return ans;
}

int maxDepth(TreeNode* root) {
        if(root == NULL) 
		return 0;

        int leftHeight = maxDepth(root->left);
        int rightHeight = maxDepth(root->right);
        int ans = max(leftHeight, rightHeight) + 1;
        return ans;
    }
    int diameterOfBinaryTree(TreeNode* root) {
        if(root == NULL) 
        return 0;

        int op1 = diameterOfBinaryTree(root->left);
        int op2 = diameterOfBinaryTree(root->right);
        int op3 = maxDepth(root->left) + 1 + maxDepth(root->right);
        int ans = max(op1, max(op2, op3));
        return ans ;
    }

int main() {
    // Write C++ code here
    Node* root=NULL;
    
    root=buildTree();
    
    levelOrderTraversal(root);
    cout<<"height: "<<height(root)<<endl;


    return 0;
}
